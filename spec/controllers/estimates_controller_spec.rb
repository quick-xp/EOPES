require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe EstimatesController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Estimate. As you add validations to Estimate, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # EstimatesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    #ユーザログイン
    login_user
    #マーケットデータはダミーデータを使用する
    get_dummy_market_data_for_controller
    #Dummy Estimate Data
    before :each do
      create_dummy_estimate_data
    end
    it ":index テンプレートを表示すること" do
      get :index
      expect(response).to render_template :index
    end

    context "現在ユーザと他ユーザの情報が複数ある場合" do
      it "現在ユーザの情報のみ取得できる" do
        get :index
        expect(assigns(:estimates)).to eq([@estimate])
      end
    end

  end

  describe "GET show" do
    #ユーザログイン
    login_user
    #マーケットデータはダミーデータを使用する
    get_dummy_market_data_for_controller
    #Dummy Estimate Data
    before :each do
      create_dummy_estimate_data
    end

    it "assigns the requested estimate as @estimate" do
      get :show, {:id => @estimate.to_param}
      expect(assigns(:estimate)).to eq(@estimate)
    end

    context "作成者と現在ユーザが同じである場合" do
      it ":show テンプレートを表示すること" do
        get :show, {:id => @estimate.to_param}
        expect(response).to render_template :show
      end
    end

    context "作成者と現在ユーザが同じでない場合" do
      it ":show テンプレートが表示されないこと" do
        get :show, {:id => 2}
        expect(response).not_to render_template :show
      end
    end
  end

  describe "Get select" do
    login_user
    it ":select テンプレートを表示すること" do
      get :select
      expect(response).to render_template :select
    end
  end

  describe "GET new" do
    #ユーザログイン
    login_user
    #マーケットデータはダミーデータを使用する
    get_dummy_market_data_for_controller
    before :each do
      #'Abatis' 100mm Reinforced Steel Plates I Blueprint
      session[:type_id] = 23784
      #Market Price データ作成
      create_dummy_market_price_data
      #System毎のdummy cost index作成
      create_dummy_industry_systems
    end

    it ":new テンプレートを表示すること" do
      get :new
      expect(response).to render_template :new
    end

    it "@region_listにリージョン一覧が設定されること"
    it "@solar_system_listに空の配列が設定されること"
    it "選ばれたBluePrintに対応した製品のRegion内の平均価格が設定されること"
    it "選ばれたBluePrintに対応した製品のUniverse内の平均価格が設定されること"
    it "選ばれたBluePrintに対応した製品のmaterial listがセッションに詰められること"
    it "選ばれたBlueprintの情報が@estimate_formに設定されていること その際 runs:1,me:10,te:10であること"
    it "選ばれたBlueprintの生産時ジョブコストが計算され@estimate_formに設定されていること"
    it "選ばれたBlueprintに対応した製品のtype_idが@estimate_formに設定されていること"
    it "選ばれたBlueprintに対応した製品の初期Sell Priceが設定されていること　なお、リージョン内の平均価格が設定されること"
    it "合計見積もり価格が設定されること"
  end

  describe "GET edit" do
    it "assigns the requested estimate as @estimate" do
      estimate = Estimate.create! valid_attributes
      get :edit, {:id => estimate.to_param}, valid_session
      expect(assigns(:estimate)).to eq(estimate)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Estimate" do
        expect {
          post :create, {:estimate => valid_attributes}, valid_session
        }.to change(Estimate, :count).by(1)
      end

      it "assigns a newly created estimate as @estimate" do
        post :create, {:estimate => valid_attributes}, valid_session
        expect(assigns(:estimate)).to be_a(Estimate)
        expect(assigns(:estimate)).to be_persisted
      end

      it "redirects to the created estimate" do
        post :create, {:estimate => valid_attributes}, valid_session
        expect(response).to redirect_to(Estimate.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved estimate as @estimate" do
        post :create, {:estimate => invalid_attributes}, valid_session
        expect(assigns(:estimate)).to be_a_new(Estimate)
      end

      it "re-renders the 'new' template" do
        post :create, {:estimate => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested estimate" do
        estimate = Estimate.create! valid_attributes
        put :update, {:id => estimate.to_param, :estimate => new_attributes}, valid_session
        estimate.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested estimate as @estimate" do
        estimate = Estimate.create! valid_attributes
        put :update, {:id => estimate.to_param, :estimate => valid_attributes}, valid_session
        expect(assigns(:estimate)).to eq(estimate)
      end

      it "redirects to the estimate" do
        estimate = Estimate.create! valid_attributes
        put :update, {:id => estimate.to_param, :estimate => valid_attributes}, valid_session
        expect(response).to redirect_to(estimate)
      end
    end

    describe "with invalid params" do
      it "assigns the estimate as @estimate" do
        estimate = Estimate.create! valid_attributes
        put :update, {:id => estimate.to_param, :estimate => invalid_attributes}, valid_session
        expect(assigns(:estimate)).to eq(estimate)
      end

      it "re-renders the 'edit' template" do
        estimate = Estimate.create! valid_attributes
        put :update, {:id => estimate.to_param, :estimate => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested estimate" do
      estimate = Estimate.create! valid_attributes
      expect {
        delete :destroy, {:id => estimate.to_param}, valid_session
      }.to change(Estimate, :count).by(-1)
    end

    it "redirects to the estimates list" do
      estimate = Estimate.create! valid_attributes
      delete :destroy, {:id => estimate.to_param}, valid_session
      expect(response).to redirect_to(estimates_url)
    end
  end

  def create_dummy_estimate_data
    create(:estimate_material, :estimate_id => 1)
    create(:estimate_material, :estimate_id => 2)
    create(:estimate_blueprint, :estimate_id => 1)
    create(:estimate_blueprint, :estimate_id => 2)
    create(:estimate_job_cost, :estimate_id => 1)
    create(:estimate_job_cost, :estimate_id => 2)
    @estimate = create(:estimate, :id => 1, :user_id => "100000000")
    create(:estimate, :id => 2, :user_id => "999")
  end

  def create_dummy_market_price_data
    create(:market_price, :type_id => 34,:adjusted_price => 10.0,:average_price => 10.0)
    create(:market_price, :type_id => 35,:adjusted_price => 10.0,:average_price => 10.0)
    create(:market_price, :type_id => 36,:adjusted_price => 10.0,:average_price => 10.0)
    create(:market_price, :type_id => 37,:adjusted_price => 10.0,:average_price => 10.0)
    create(:market_price, :type_id => 38,:adjusted_price => 10.0,:average_price => 10.0)
    create(:market_price, :type_id => 39,:adjusted_price => 10.0,:average_price => 10.0)
    create(:market_price, :type_id => 23133,:adjusted_price => 10.0,:average_price => 10.0)
    create(:market_price, :type_id => 23143,:adjusted_price => 10.0,:average_price => 10.0)
    create(:market_price, :type_id => 23173,:adjusted_price => 10.0,:average_price => 10.0)
  end

  def create_dummy_industry_systems
    create(:industry_system_jita)
  end
end