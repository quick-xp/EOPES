require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UserSkillsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # UserSkill. As you add validations to UserSkill, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {:skill_3380 => 5,:skill_3388 => 5}
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UserSkillsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    #ユーザログイン
    login_user

    it ":index テンプレートを表示すること" do
      get :index
      expect(response).to render_template :index
    end

  end

  describe "POST #create" do
    #ユーザログイン
    login_user

    context "with valid params" do
      it "creates a new UserSkill" do
        expect {
          post :create, {:user_skill_form => valid_attributes}, valid_session
        }.to change(UserSkill, :count).by(2)
      end

      it "assigns a newly created user_skill as @user_skill" do
        post :create, {:user_skill_form => valid_attributes}, valid_session
        expect(assigns(:user_skill_form)).to be_a(UserSkillForm)
      end

      it "redirects to the created user_skill" do
        post :create, {:user_skill_form => valid_attributes}, valid_session
        expect(response).to redirect_to(user_skills_url)
      end
    end

    #context "with invalid params" do
    #  it "assigns a newly created but unsaved user_skill as @user_skill" do
    #    post :create, {:user_skill => invalid_attributes}, valid_session
    #    expect(assigns(:user_skill)).to be_a_new(UserSkill)
    #  end

    #  it "re-renders the 'new' template" do
    #    post :create, {:user_skill => invalid_attributes}, valid_session
    #    expect(response).to render_template("new")
    #  end
    #end
  end


end
